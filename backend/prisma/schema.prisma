generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                  Int            @id @default(autoincrement())
  firstName           String?
  lastName            String?
  role                Role           @default(USER)
  balance             Decimal        @default(0.00) @db.Decimal(10, 2)
  createdAt           DateTime       @default(now()) @map("created_at")
  updatedAt           DateTime       @updatedAt @map("updated_at")
  cashMovements       CashMovement[]
  closedCashRegisters CashRegister[] @relation("ClosedBy")
  openedCashRegisters CashRegister[] @relation("OpenedBy")
  orders              Order[]

  @@map("users")
}

model Product {
  id           Int           @id @default(autoincrement())
  name         String
  description  String?
  quantity     Int           @default(0)
  price        Decimal       @db.Decimal(10, 2)
  trainerPrice Decimal       @map("trainer_price") @db.Decimal(10, 2)
  cost         Decimal?      @default(0.00) @db.Decimal(10, 2)
  isActive     Boolean       @default(true)
  createdAt    DateTime      @default(now()) @map("created_at")
  updatedAt    DateTime      @updatedAt @map("updated_at")
  orderDetails OrderDetail[]

  @@map("products")
}

model Order {
  id            Int            @id @default(autoincrement())
  clientId      Int
  totalAmount   Decimal        @map("total_amount") @db.Decimal(10, 2)
  date          DateTime       @default(now())
  paymentMethod PaymentType    @map("payment_method")
  notes         String?
  discount      Float?         @default(0)
  cashMovements CashMovement[]
  products      OrderDetail[]
  client        User           @relation(fields: [clientId], references: [id])

  @@index([clientId], map: "orders_clientId_fkey")
  @@map("orders")
}

model OrderDetail {
  id         Int     @id @default(autoincrement())
  orderId    Int
  productId  Int
  quantity   Int
  unitPrice  Decimal @map("unit_price") @db.Decimal(10, 2)
  totalPrice Decimal @map("total_price") @db.Decimal(10, 2)
  order      Order   @relation(fields: [orderId], references: [id])
  product    Product @relation(fields: [productId], references: [id])

  @@index([orderId], map: "order_details_orderId_fkey")
  @@index([productId], map: "order_details_productId_fkey")
  @@map("order_details")
}

model CashRegister {
  id              Int                @id @default(autoincrement())
  openingDate     DateTime           @default(now()) @map("opening_date")
  closingDate     DateTime?          @map("closing_date")
  openingBalance  Decimal            @default(0.00) @map("opening_balance") @db.Decimal(10, 2)
  closingBalance  Decimal?           @map("closing_balance") @db.Decimal(10, 2)
  expectedBalance Decimal?           @map("expected_balance") @db.Decimal(10, 2)
  difference      Decimal?           @db.Decimal(10, 2)
  status          CashRegisterStatus @default(OPEN)
  notes           String?
  openedBy        Int?               @map("opened_by")
  closedBy        Int?               @map("closed_by")
  movements       CashMovement[]
  closedByUser    User?              @relation("ClosedBy", fields: [closedBy], references: [id])
  openedByUser    User?              @relation("OpenedBy", fields: [openedBy], references: [id])

  @@index([closedBy], map: "cash_register_closed_by_fkey")
  @@index([openedBy], map: "cash_register_opened_by_fkey")
  @@map("cash_register")
}

model CashMovement {
  id             Int          @id @default(autoincrement())
  cashRegisterId Int          @map("cash_register_id")
  movementType   MovementType @map("movement_type")
  amount         Decimal      @db.Decimal(10, 2)
  orderId        Int?         @map("order_id")
  description    String?      @db.VarChar(500)
  createdAt      DateTime     @default(now()) @map("created_at")
  createdBy      Int?         @map("created_by")
  cashRegister   CashRegister @relation(fields: [cashRegisterId], references: [id], onDelete: Cascade)
  user           User?        @relation(fields: [createdBy], references: [id])
  order          Order?       @relation(fields: [orderId], references: [id])

  @@index([cashRegisterId], map: "cash_movements_cash_register_id_fkey")
  @@index([createdBy], map: "cash_movements_created_by_fkey")
  @@index([orderId], map: "cash_movements_order_id_fkey")
  @@map("cash_movements")
}

model DailyClosing {
  id            Int      @id @default(autoincrement())
  date          DateTime @unique @db.Date
  cashRevenue   Decimal  @db.Decimal(10, 2) @map("cash_revenue")
  qrRevenue     Decimal  @db.Decimal(10, 2) @map("qr_revenue")
  creditRevenue Decimal  @db.Decimal(10, 2) @map("credit_revenue")
  trou          Decimal  @default(0) @db.Decimal(10, 2)
  fondCaisse    Decimal  @db.Decimal(10, 2) @map("fond_caisse")
  notes         String?
  closedBy      Int?     @map("closed_by")
  closedAt      DateTime @default(now()) @map("closed_at")

  @@map("daily_closings")
}

enum Role {
  TRAINER
  USER
}

enum PaymentType {
  CREDITCARD
  PAYPAL
  CASH
  QRCODE
  ACCOUNT_DEBIT
  FREE
}

enum CashRegisterStatus {
  OPEN
  CLOSED
}

enum MovementType {
  OPENING_FUND
  SALE
  REFUND
  EXPENSE
  DEPOSIT
  WITHDRAWAL
  ADJUSTMENT
}